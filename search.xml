<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在何处阅读文献？</title>
    <url>/2019/10/16/%E5%9C%A8%E4%BD%95%E5%A4%84%E9%98%85%E8%AF%BB%E6%96%87%E7%8C%AE%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="检索文献和文章的来源"><a href="#检索文献和文章的来源" class="headerlink" title="检索文献和文章的来源"></a>检索文献和文章的来源</h1><h2 id="中文："><a href="#中文：" class="headerlink" title="中文："></a>中文：</h2><p>学校图书馆vpn支持下的知网、万方</p>
<p>1.知网：<br><a href="https://www.cnki.net/" target="_blank" rel="noopener">https://www.cnki.net/</a></p>
<p><img src="/images/pasted-4.png" alt="upload successful"><br>知网检索页面</p>
<a id="more"></a>
<p>2.万方：<br><a href="http://g.wanfangdata.com.cn/index.html" target="_blank" rel="noopener">http://g.wanfangdata.com.cn/index.html</a></p>
<p><img src="/images/pasted-5.png" alt="upload successful"><br>万方检索页面</p>
<h2 id="英文："><a href="#英文：" class="headerlink" title="英文："></a>英文：</h2><p>1.Google学术（遇到一篇别人推荐的或者公众号推荐的英文论文，只知道文章的题目，那么最快找到全文的方式就是它了）</p>
<p>梯子版：<br><a href="https://scholar.google.com.hk/?hl=zh-CN" target="_blank" rel="noopener">https://scholar.google.com.hk/?hl=zh-CN</a></p>
<p>镜像版导航页：4243.net/</p>
<p>2.文献共享平台arxiv<br><a href="https://arxiv.org/#" target="_blank" rel="noopener">https://arxiv.org/#</a></p>
<p><img src="/images/pasted-6.png" alt="upload successful"><br>arxiv检索页面</p>
<h3 id="什么是arxiv？"><a href="#什么是arxiv？" class="headerlink" title="什么是arxiv？"></a>什么是arxiv？</h3><pre><code>简单来说，为了防止自己的idea在论文被收录前被别人剽窃，我们会将预稿上传到arvix作为预收录，因此这就是个可以证明论文原创性（上传时间戳）的文档收录网站。</code></pre><h2 id="学校图书馆vpn支持下的："><a href="#学校图书馆vpn支持下的：" class="headerlink" title="学校图书馆vpn支持下的："></a>学校图书馆vpn支持下的：</h2><pre><code>sci:
http://www.webofknowledge.com

EI:
engineeringvillage.com/

Nature:
nature.com/

Science:
sciencemag.org/</code></pre><h1 id="本文参考自灰灰考研微信公众号"><a href="#本文参考自灰灰考研微信公众号" class="headerlink" title="本文参考自灰灰考研微信公众号"></a>本文参考自灰灰考研微信公众号</h1>]]></content>
      <categories>
        <category>学习方法</category>
      </categories>
      <tags>
        <tag>paper</tag>
      </tags>
  </entry>
  <entry>
    <title>研究生该如何阅读论文？</title>
    <url>/2019/10/16/%E7%A0%94%E7%A9%B6%E7%94%9F%E8%AF%A5%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><pre><code>对于研究生新生来说，阅读论文是必不可少的，但是对于大部分刚刚进入研究生生活的新生来说，都不太知道如何去阅读文献资料。
本文就带萌新们学会如何阅读文献。大佬请选择性忽略嗷！</code></pre><h1 id="理想阅读顺序"><a href="#理想阅读顺序" class="headerlink" title="理想阅读顺序"></a>理想阅读顺序</h1><p>硕博学位论文-&gt;中文综述论文-&gt;英文综述论文-&gt;英文顶会及期刊-&gt;子方向相关度高的中英文论文</p>
<a id="more"></a>

<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><h2 id="第一：硕博论文"><a href="#第一：硕博论文" class="headerlink" title="第一：硕博论文"></a>第一：硕博论文</h2><p> 如果你想迅速进入一个领域，对于英文不占优的同学而言，读硕博的学位论文是最友好的方式。尤其是博士论文，博士论文一般都在100-200页之间，当然也有丧心病狂的300页。博士同学会将自己研究方向的研究背景、发展、前人提出方法都介绍个七七八八，非常适合刚刚进入该领域的萌新。博士论文不建议读多，5-10篇即可，粗略阅读，目的是了解该方向。</p>
<h2 id="第二：中文综述论文"><a href="#第二：中文综述论文" class="headerlink" title="第二：中文综述论文"></a>第二：中文综述论文</h2><p> 综述论文，它是利用已发表的文献资料为原始素材撰写的论文，顾名思义有两个层次，”综“和”述“两个层次。（引用百度：所谓综就是指作者必须对现有的大量素材进行归纳整理、综合分析，而使材料更加精炼、更加明确、更加层次分明、更有逻辑性。所谓述就是评述，是对所写专题的比较全面、深入、系统的论述。因而，综述是对某一专题、某一领域的历史背景、前人工作、争论焦点、研究现状与发展前景等方面，以作者自己的观点写成的严谨而系统的评论性、资料性），综述的重点其实是在评，因为你要对别人的工作进行评价，总结，这需要对该领域有非常深刻的理解，也同时需要非常强的提炼，归纳的总结能力。所以一般都由该领域内资深的学者大牛撰写。但是在咱们的高校里，刚进实验室的研究生可能会被导师要求写一篇综述论文，导师们的出发点是好的，是想促进我们读大量的论文，对该方向有所了解和收获，也能迅速进入研究生的状态。当然，如果你能在阅读论文的过程中将自己的一些见解和思考形成论文，那肯定再好不过了。如果你的导师在该领域内就是个大牛，那你就已经具备写一篇中文综述的先天条件了，你的导师知道该领域内的关键性论文，也会对你形成能发表的综述给出非常有建设性的指导意见。一航在自己的领域内见到了以导师为第一作者，硕士生为第二作者的综述论文发表在CCF中文的C类期刊中，很明显该论文是这个硕士生写的。为什么要阅读中文的综述呢？还是因为要降低入门难度，降低英文对阅读的阻碍。综述论文也不建议读多，5篇左右即可，目的也是了解该方向，能够对该方向有一个更宏观的认识。</p>
<h2 id="第三：英文综述论文"><a href="#第三：英文综述论文" class="headerlink" title="第三：英文综述论文"></a>第三：英文综述论文</h2><p> 文章题目中一般含有survey、review等关键词。等一下，咱不是刚刚读完中文的综述么，英文的有啥区别呢？首先，学术萌新们应该都有一个梦想，那就是发表高层次的顶级会议论文（顶会）或者顶级期刊论文（顶刊），这些论文可都是英文论文，你要写英文论文，当然要读英文论文，人不就是从模仿开始的么？其次，学术界的大牛遍布各个国家，英语是学术界通用的语言，前面说了，综述都是大牛才写的，在这里，你大概率不会见到硕士博士为了入门而写的综述（文献阅读报告），英文综述一般都是期刊联系领域大牛约稿而形成的，大牛们会对该领域内的关键性文章进行枚举和评述，大牛们枚举的一些发表在顶会顶刊的论文应该当成重点文章。最后，一航的个人感觉英文综述相较中文综述还是有很多不同的，比如中文综述多少都会引一些中文论文，这对以后写毕业论文会有一定的帮助，英文综述肯定不会引中文的啦，还有文章在结构和思路上的不同等等。英文的综述论文，读5-10篇即可，如若找到和自己课题非常贴合的综述，可以精读，近年的综述还会引用前人的综述，顺着这些综述去寻找更多关键性的论文，慢慢地，该领域的全貌就会浮现出来了。</p>
<h2 id="第四：英文顶会顶刊"><a href="#第四：英文顶会顶刊" class="headerlink" title="第四：英文顶会顶刊"></a>第四：英文顶会顶刊</h2><p> 不同领域有不同的顶会顶刊，中科院有分区、中国计算机学会也有分区，有些领域看重分区，有一些却并不看重，分区毕竟是国人搞出来的嘛<del>以后如果要发表论文关注一下自己学校的计分规则和毕业标准即可。常见的研究领域及其顶会顶刊譬如：<br>Artificial intelligence AAAI, IJCAI<br>Computer vision CVPR, ECCV, ICCV<br>Machine learning &amp; data mining ICML, KDD, NIPS<br>Robotics ICRA, IROS, RSS，ISRR，ISER，刊 IJRR，TRO，JFR，RA-L，AURO，RAM，RAS<br>譬如：一航的研究方向是无人机路径规划，属于机器人大类。关于研究方向的顶会顶刊有哪些，可以百度或者问导师、师兄、师姐，提前列在自己的笔记中，会对自己检索和发表论文有很大的指导性意义。英文的会议和期刊论文数量是最多的，遇到好的就读吧</del>来源不乏各种公众号推荐、知乎大牛回答推荐、导师和师兄师姐整理的论文压缩包。</p>
<h2 id="第五：子方向中相关度最高的中文英文论文"><a href="#第五：子方向中相关度最高的中文英文论文" class="headerlink" title="第五：子方向中相关度最高的中文英文论文"></a>第五：子方向中相关度最高的中文英文论文</h2><p>在此，读了那么多文献，在领域内你应该熟知了各种术语，譬如ML、DL、NLP、UAV、Motion Planning、Path Planning、Coverage Path Planning（CPP problem）等等和你关注领域内的文献术语。<br>以这些关键词去检索和你所做项目或者研究方向相关度最高的、发表层次高的文章进行精读。</p>
<h2 id="PS"><a href="#PS" class="headerlink" title="PS:"></a>PS:</h2><p>1.曾经在组会中见识过导师看待论文的方式，因为导师是该方向的大牛，他看了一篇论文之后，从挂名单位可以猜测这篇论文出自谁手（因为可能这篇论文的一作是一个去该实验室的交换生，大概率是该生的指导老师给他用作成果），导师很清楚地知道世界上哪些人，哪个实验室甚至哪个人做该领域做的顶尖，知道其中的人脉关系，也能看出这篇论文即使是顶会顶刊，很可能并不是他们所做工作的最主要的那篇论文。导师们能从这一角度去看论文，萌新们一定想不到（毕竟细分的话学术圈就那么大）~</p>
<p>2.如果你也是无人机路径规划方向的萌新不妨来这里看一下~<br>  <a href="https://zhuanlan.zhihu.com/p/76521719" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/76521719</a></p>
<h1 id="声明："><a href="#声明：" class="headerlink" title="声明："></a>声明：</h1><p>本文参考灰灰考研微信公众号。</p>
]]></content>
      <categories>
        <category>学习方法</category>
      </categories>
      <tags>
        <tag>paper</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo d时如何省去输入账号密码</title>
    <url>/2019/10/15/hexo-d%E6%97%B6%E5%A6%82%E4%BD%95%E7%9C%81%E5%8E%BB%E8%BE%93%E5%85%A5%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h2 id="记录一次踩坑"><a href="#记录一次踩坑" class="headerlink" title="记录一次踩坑"></a>记录一次踩坑</h2><h3 id="前情提要："><a href="#前情提要：" class="headerlink" title="前情提要："></a>前情提要：</h3><pre><code>在hexo d把博客往github仓库推送时，会让你输入github的账号和密码
但是mac的最新系统很坑的一点是每次都会提示是否初始化钥匙串。
于是我就在网上查找解决办法，成功解决此问题。</code></pre><a id="more"></a>

<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><pre><code>本人系统为 macOS Catalina 10.15（巨后悔升级该系统，好多软件不支持）</code></pre><h3 id="第一步-设置SSH"><a href="#第一步-设置SSH" class="headerlink" title="第一步 设置SSH"></a>第一步 设置SSH</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~/.sh </span><br><span class="line">sudo ssh-keygen -t rsa -C &quot;你的注册邮箱&quot; #生成ssh</span><br><span class="line"># 然后连按三下回车</span><br><span class="line"> </span><br><span class="line">sudo gedit id_rsa.pub #打开id_rsa.pub文件，并把内容复制到剪切板</span><br></pre></td></tr></table></figure>

<p>登录到github打开设置：</p>
<p><img src="/images/pasted-0.png" alt="upload successful"></p>
<p>选择SSH and GPG keys，点New SSH</p>
<p><img src="/images/pasted-1.png" alt="upload successful"></p>
<p>配置SSH 点击Add SSH Key 完成</p>
<p><img src="/images/pasted-2.png" alt="upload successful"></p>
<h3 id="第二步-配置SSH"><a href="#第二步-配置SSH" class="headerlink" title="第二步 配置SSH"></a>第二步 配置SSH</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh #进入ssh目录</span><br><span class="line">sudo touch config #新建ssh的配置文件</span><br><span class="line">sudo vim config #修改ssh的配置文件</span><br></pre></td></tr></table></figure>

<p>config文件的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Host github.com  </span><br><span class="line">User 你的注册邮箱 </span><br><span class="line">Hostname ssh.github.com  </span><br><span class="line">PreferredAuthentications publickey  </span><br><span class="line">IdentityFile ~/.ssh/id_rsa  </span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure>

<p>测试SSH是否配置完成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ssh git@github.com</span><br></pre></td></tr></table></figure>

<p>看到下图所示，即为配置成功！<br><img src="/images/pasted-3.png" alt="upload successful"></p>
<h3 id="第三步-修改blog中的-config-yml"><a href="#第三步-修改blog中的-config-yml" class="headerlink" title="第三步 修改blog中的_config.yml"></a>第三步 修改blog中的_config.yml</h3><p>修改_config.yml文件中的deploy下的repo属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:你的name/你的username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h3 id="然后测试-hexo-d-是否成功"><a href="#然后测试-hexo-d-是否成功" class="headerlink" title="然后测试 hexo d 是否成功"></a>然后测试 hexo d 是否成功</h3><p>成功的标志为，hexo d后 直接完成博客上传。</p>
<h3 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h3><pre><code>https://blog.csdn.net/Code_7900x/article/details/98949097</code></pre>]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>ssh</tag>
        <tag>he xo</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown常用使用方法</title>
    <url>/2019/10/15/markdown%E5%B8%B8%E7%94%A8%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="一：标题"><a href="#一：标题" class="headerlink" title="一：标题"></a>一：标题</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><a id="more"></a>

<h1 id="二：字体"><a href="#二：字体" class="headerlink" title="二：字体"></a>二：字体</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p>
<h1 id="三：引用"><a href="#三：引用" class="headerlink" title="三：引用"></a>三：引用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>vim文本编辑器的使用</title>
    <url>/2019/10/13/vim%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="vim简介"><a href="#vim简介" class="headerlink" title="vim简介"></a>vim简介</h2><p>vi与vim<br>vi编辑器是所有Unix及Linux系统下标准的编辑器，他就相当于windows系统中的记事本一样，它的强大不逊色于任何最新的文本编辑器。他是我们使用Linux系统不能缺少的工具。由于对Unix及Linux系统的任何版本，vi编辑器是完全相同的，学会它后，您将在Linux的世界里畅行无阻。<br>vim 具有程序编辑的能力，可以以字体颜色辨别语法的正确性，方便程序设计。</p>
<a id="more"></a>

<p>因为程序简单，编辑速度相当快速。<br>vim可以当作vi的升级版本，他可以用多种颜色的方式来显示一些特殊的信息。<br>vim会依据文件扩展名或者是文件内的开头信息， 判断该文件的内容而自动的执行该程序的语法判断式，再以颜色来显示程序代码与一般信息。<br>vim里面加入了很多额外的功能，例如支持正则表达式的搜索、多文件编辑、块复制等等。 这对于我们在Linux上进行一些配置文件的修改工作时是很棒的功能。</p>
<hr>
<h2 id="vim具体使用"><a href="#vim具体使用" class="headerlink" title="vim具体使用"></a>vim具体使用</h2><p>为何要学 vi<br>所有的Unix Like系统都会内建vi文本编辑器，其他的文本编辑器则不一定会存在；<br>一些软件的编辑接口会主动调用vi (例如 crontab, visudo, edquota 等命令)；</p>
<p>vi的使用<br>基本上vi可以分为三种状态，分别是一般模式、编辑模式和命令行模式，各模式的功能区分如下：</p>
<p>一般模式：<br>以vi打开一个文件就直接进入一般模式了(这是默认的模式)。在这个模式中， 你可以使用上下左右按键来移动光标，你可以使用删除字符或删除整行来处理文件内容， 也可以使用复制、粘贴来处理你的文件数据。</p>
<p>编辑模式：<br>在一般模式中可以进行删除、复制、粘贴等的操作，但是却无法编辑文件的内容，只有当到你按下【i, I, o, O, a, A, r, R】等任何一个字母之后才会进入编辑模式。这时候屏幕的左下方会出现【INSERT或 REPLACE】的字样，此时才可以进行编辑。而如果要回到一般模式时， 则必须要按下【Esc】即可退出编辑模式。</p>
<p>命令行模式：<br>输入【 : / ? 】三个中的任何一个，就可以将光标移动到最底下那一行。在这个模式中， 可以提供查找、读取、存盘、替换字符、离开vi、显示行号等的动作则是在此模式中完成的！</p>
<p>一般模式可用的按钮说明<br>移动光标<br>【h、j、k、l】，分别控制光标左、下、上、右移一格<br>按【ctrl+b】屏幕往”后”移动一页<br>按【ctrl+f】屏幕往”前”移动一页</p>
<p>【n<space>】光标向右移动n个字符<br>【Home】移动到这一行的最前面字符处:0数字，但不能用数字小键盘上的数字<br>【End】 移动到这一行的最后面字符处:$，我测试好像不行<br>【w】光标跳到下个字的开头<br>【e】光标跳到下个字的字尾</space></p>
<p>【H】 光标移动到这个屏幕的最上方那一行的第一个字符<br>【M】 光标移动到这个屏幕的中间那一行的第一个字符<br>【L】光标移动到这个屏幕的最下方那一行的第一个字符</p>
<p>【G】 移动到这个文件的最后一行<br>【nG】移动到这个文件的第n行(可配合:set nu)<br>【gg】 移动到这个文件的第一行，相当于1G<br>【n<enter>】光标向下移动n行</enter></p>
<p>查找与替换<br>【/word】 向光标向下寻找一个名称为word的字符串<br>【?word】 向光标向上寻找一个名称为word的字符串<br>【n】 代表重复前一个查找的动作<br>【N】 与n刚好相反，为【反向】进行行前一个查找动作</p>
<p>【:n1,n2s/word1/word2/g】  n1与n2为数字，在第n1与n2行之间查找word1 这个字符串，并将该字符串替换为word2</p>
<p>【:1,$s/word1/word2/g】 从第一行到最后一行查找word1字符串，并将该字符串替换为word2<br>【:1,$s/word1/word2/gc】 从第一行到最后一行查找word1字符串，并将该字符串替换为word2 ，且在替换前提示用户确认是否进行替换</p>
<p>删除、复制与粘贴</p>
<p>【x】 为向后删除一个字符 (相当于【del】键)<br>【X】 为向前删除一个字符(相当于【backspace】键)<br>【nx】 连续向后删除n个字符</p>
<p>【dd】 删除光标所在行<br>【ndd】 删除光标所在的向下n行<br>【d1G】 删除光标所在行到第一行的所有数据<br>【dG】 删除光标所在到最后一行的所有数据</p>
<p>【d$】 删除光标所在处，到该行的最后一个字符<br>【d0】 删除光标所在处，到该行的最前一个字符</p>
<p>【yy】 复制光标所在的那一行<br>【nyy】 复制光标所在的向下n列</p>
<p>【y1G】 复制光标所在行到第一行的所有数据<br>【yG】 复制光标所在行到最后一行的所有数据</p>
<p>【y0】 复制光标所在的那个字符到该行行首的所有数据<br>【y$】 复制光标所在的那个字符到该行行尾的所有数据</p>
<p>【p】将已复制的数据在光标下一行粘贴上<br>【P】 则为贴在光标的上一行</p>
<p>【u】 恢复前一个操作<br>【Ctrl+r】重做上一个操作</p>
<p>【.】 是重复前一个操作</p>
<p>一般模式切换到编辑模式的可用的按钮说明<br>【i, I】 进入编辑模式：<br>i 为【从目前光标所在处插入】<br>I 为【在目前所在行的第一个非空格符处开始插入】</p>
<p>【a, A】 进入编辑模式(Insert mode)：<br>a 为【从目前光标所在的下一个字符处开始插入】<br>A 为【从光标所在行的最后一个字符处开始插入】</p>
<p>【o, O】 进入编辑模式：<br>o 为【在目前光标所在的下一行处插入新的一行】<br>O 为在目前光标所在处的上一行插入新的一行</p>
<p>【r, R】 进入取代模式：<br>r 只会取代光标所在的那一个字符一次<br>R会一直取代光标所在的文字，直到按下 ESC 为止；</p>
<p>【Esc】 退出编辑模式，回到一般模式</p>
<p>一般模式切换到命令行模式可用的按钮说明<br>【:w】 保存编辑的内容<br>【:w!】强制写入该文件，但跟你对该文件的权限有关<br>【:q】 离开vi<br>【:q!】 不想保存修改强制离开<br>【:wq】 保存后离开<br>【:x】 保存后离开<br>【ZZ】 若文件没有更动，则不保存离开，若文件已经被更改过，则保存后离开</p>
<p>【:w filename】 将编辑的数据保存成另一个文件（类似另存）<br>【:r filename】 在编辑的数据中，读入另一个文件的数据。即将【filename】 这个文件的内容加到光标所在行后面。</p>
<p>【:n1,n2 w filename】 将n1到n2的内容保存成filename这个文件。<br>【:! command】暂时离开vi 到命令行模式下执行command的显示结果！例如 【:! ls /home】即可在 vi 当中察看/home底下以ls输出的文件信息！</p>
<p>【:set nu】 显示行号<br>【:set nonu】 与 set nu 相反，为取消行</p>
<p>vim的缓存文件、恢复与开启时的警告信息<br>我们知道一些常用的编辑软件，都有个恢复的功能，就是说当你的系统因为某些原因而导致类似当机的情况时，还可以利用这个恢复功能将之前未保存的数据找回来。我们的VIM也有这个功能。</p>
<p>当我们在使用vim编辑时，vim会在与被编辑的文件的目录下，再建立一个名为 .filename.swp的文件。如果你的系统因为某些原因断线了， 导致你编辑的文件还没有保存，这个时候 .filenam.swp 就能够发会救援的功能了。</p>
<p>我们来演示一下<br>vim man.config<br>ctrl+z放到后台执行<br>我们停止VI的进程<br>一种方法<br>ps aux |grep vi<br>kill -9 n</p>
<p>另外一种方法<br>jobs<br>kill -9 %1</p>
<p>我们用ls -l 命令来查看一下目录里面，会发现有个.man.config.swp的文件，这个文件就是个缓存的文件</p>
<p>我们再来编辑<br>vim man.config<br>这时候会出现一些信息<br>问题一：可能有其他人或程序同时在编辑这个文件：<br>问题二：在前一个vim的环境中，可能因为某些不知名原因导致vim中断 (crashed)：</p>
<p>右下角会出现六个命令项，其作用说明如下：<br>(O)pen Read-Only：打开此文件成为只读档， 可以用在你只是想要查阅该文件内容并不想要进行编辑行为时。一般来说，在上课时，如果你是登入到同学的计算机去看他的配置文件， 结果发现其实同学他自己也在编辑时，可以使用这个模式；<br>(E)dit anyway：还是用正常的方式打开你要编辑的那个文件， 并不会载入暂存盘的内容。如果说两个人都在编辑这个文件的话，很容易出现互相改变对方的文件等问题。<br>(R)ecover：就是加载暂存盘的内容，用在你要救回之前未保存的工作。 不过当你救回来并且储存离开vim后，还是要手动自行删除那个暂存档。<br>(D)elete it：你确定那个暂存档是无用的！那么开启文件前会先将这个暂存盘删除<br>(Q)uit：按下 q 就离开vim，不会进行任何动作回到命令提示字符。<br>(A)bort：忽略这个编辑行为，感觉上与 quit 非常类似！</p>
<p>vim的功能<br>其实，目前大部分的Linux发行版本都以vim取代了vi。为什么要用vim呢？因为vim具有颜色显示的功能，并且还支持许多的程序语法(syntax)和相应的提示信息。查看自己的VI是不是被VIM代替，可以用<br>alias这个命令来查看是不是有alias vi=’vim’这一行。</p>
<p>块选择<br>【v】字符选择，会将光标经过的地方反白选择<br>【V】 行选择，会将光标经过的行反白选择<br>【Ctrl+v】 块选择，可以用长方形的方式选择资料 （提制竖列）<br>【y】 将反白的地方复制<br>【d】 将反白的地方删除</p>
<p>多文件编辑<br>大家在使用vim的时候，可能会碰到你需要复制一个文件中的某段到另外一个文件中，而vim不能够在关闭的时候，把这段保留住。或者是用其它的方法复制。<br>【vim file1 file2】</p>
<p>【:n】编辑下一个文件<br>【:N】编辑上一个文件<br>【:files】列出目前这个vim编辑的所有文件</p>
<p>多窗口功能<br>有两个需要对照着看的文件<br>【:sp filename】开启一个新窗口，如果有加 filename， 表示在新窗口开启一个新文件，否则表示两个窗口为同一个文件内容(同步显示)。</p>
<p>【ctrl+w+j】<br>【ctrl+w+↓】按键的按法是：先按下 【ctrl】 不放， 再按下 w 后放开所有的按键，然后再按下 j (或向下箭头键)，则光标可移动到下方的窗口。</p>
<p>【ctrl+w+k】<br>【ctrl+w+↑】同上，不过光标移动到上面的窗口。</p>
<p>vim 环境设定与记录(<del>/.vimrc, ~/.viminfo)<br>如果我们以vim软件来查找一个文件内部的某个字符串时，这个字符串会被反白， 而下次我们再次以vim编辑这个文件时，该查找的字符串反白情况还是存在。另外，当我们重复编辑同一个文件时，当第二次进入该文件时， 光标竟然就在上次离开的那一行的开头。这个功能可能是方便，但也有不方便的时候。怎么会这样呢？这是因为我们的vim会主动的将你曾经做过的行为登录下来，那个记录动作的文件就是： ~/.viminfo，不想用这个功能，就直接删除</del>/.viminfo。只要你曾经使用过vim，那么你的家目录就会有这个文件。这个文件是自动产生的，你在vim里头所做过的动作，就可以在这个文件内部找到。有兴趣的朋友可以自己查看文件里面的内容。</p>
<p>不过，对于每个不同的发行版本对vim的预设环境都不太相同。举例来说，某些版本在查找到关键词时并不会高亮度反白， 有些版本则会主动的帮你进行缩排（所谓的缩排，就是当你按下 Enter 编辑新的一行时，光标不会在行首，而是在与上一行的第一个非空格符处对齐）的行为。其实这些都可以自行设定的，下面我们就来看看vim的环境设定。<br>vim的环境设定参数有很多，如果你想要知道目前的设定值，可以在一般模式时输入【 :set all】来查阅，由于设定项目实在太多了，我们在这里就仅列出一些平时比较常用的一些简单的设定值，给大家提供参考。</p>
<p>:set all “显示目前所有的环境参数设定值<br>:set hlsearch “高亮度反白(高亮度搜寻)<br>:set nohlsearch “取消高亮度反白(高亮度搜寻)<br>:set backspace=2 “在编辑的时候可随时用退格键删除 （０、１的时候，只针对刚输入的字符有效）<br>:set autoindent “自动缩排<br>:set noautoindent “取消自动缩排<br>:set ruler “可显示最后一行的状态<br>:set showmode “左下角那一行的状态<br>:set nu “显示行号<br>:set nonu “取消行号<br>:set bg=dark “显示不同的底色色调<br>:syntax on “进行语法检验，颜色显示<br>:syntax off “关闭语法检验</p>
<p>了解完上面的内容后，下面我们就能写一下自己的vim操作环境。<br>整体vim的设定值一般是置在/etc/vimrc这个文件里面，不建议大家来修改他。我们在自己的家目录里面建立个.vimrc文件，在这里面写入自己的内容就能实现了。<br>[root@yufei ~]# vim ~/.vimrc<br>内容如下<br>set hlsearch “高亮度反白<br>set backspace=2 “可随时用退格键删除<br>set autoindent “自动缩排<br>set ruler “可显示最后一行的状态<br>set showmode “左下角那一行的状态<br>set nu “可以在每一行的最前面显示行号<br>set bg=dark “显示不同的底色色调<br>syntax on “进行语法检验，颜色显示<br>“这个文件的双引号 (“)表示的是注释</p>
<p>保存退出vim后，在下次使用vim的时候，就会有自己的vim操作环境了。<br>提醒一点，这个文件中每一行前面加不加【:】效果都是一样的。</p>
<hr>
<p>##linux like vim必会知识</p>
<p>一、我们为什么要学习vim编辑器？</p>
<p>Linux的命令行界面下面有非常多的文本编辑器。比如经常听说的就有Emacs、pico、nano、joe与vim等。vim可以看做是vi的高级版。我们为什么一定要学习vim呢？有以下几个原因：</p>
<p>(1)所有的Unix like系统都会内置vi文本编辑器，其他的文本编辑器则不一定会存在。</p>
<p>(2)很多软件的编辑接口都会主动调用vi。</p>
<p>(3)vim具有程序编辑的能力，可以主动以字体颜色辨别语法的正确性，方便程序设计。</p>
<p>(4)程序简单，编辑速度快。</p>
<p>二、下面先介绍一下vi的基本使用方法及其相关命令。</p>
<p>vim编辑器的三种模式：一般模式、编辑模式和命令行模式。</p>
<p>在一般模式中可以进行删除、复制和粘贴的功能，但是无法编辑文件内容。从一般模式切换到编辑模式可以按下i、I、o、O、a、A、r、R键。按下Esc键可以回到一般模式。在一般模式中输入：、/、？三个中的任意一个可以将光标移到最下面的一行。在这个模式中可以提供查找数据的操作，而读取、保存、大量替换字符、离开vii、显示行号等操作则是在此模式中完成的。需要注意的是，编辑模式与命令行模式之间是不能互相切换的。</p>
<p>下面列出平时用的最多的vi命令：</p>
<p>移动光标的方法：</p>
<p>[Ctrl]+[f]：屏幕向下移动一页，相当于[PageDown]按键。</p>
<p>[Ctrl]+[b]：屏幕向上移动一页，相当于[PageUp]按键。</p>
<p>0或功能键[Home]：移动到这一行的最前面字符处。</p>
<p>$或功能键[End]：移动到这一行的最后面字符处。</p>
<p>G：移动到这个文件的最后一行。</p>
<p>gg：移动到这个文件的第一行，相当于1G.</p>
<p>N[Enter]：N为数字，光标向下移动N行。</p>
<p>查找和替换：</p>
<p>/word：向下寻找一个名称为word的字符串。</p>
<p>?word：向上寻找一个名称为word的字符串。</p>
<p>:n1,n2s/word1/word2/g：在第n1行和n2行之间寻找word1这个字符串，并且将其替换为word2.</p>
<p>:1,$s/word1/word2/g：从第一行到最后一行寻找word1这个字符串，并且将其替换为word2.</p>
<p>:1,$s/word1/word2/gc：从第一行到最后一行寻找word1这个字符串，并且将其替换为word2.且在替换前显示提示字符给用户确认是否需要替换。</p>
<p>删除、复制和粘贴：</p>
<p>x,X：在一行字中，x为向后删除一个字符（相当于[Del]键），X为向前删除一个字符（相当于[Backspace]）。</p>
<p>dd：删除光标所在的一整行。</p>
<p>ndd：删除光标所在的向下n行。</p>
<p>yy：复制光标所在的一行。</p>
<p>nyy：复制光标所在的向下n行。</p>
<p>p,P：p为将已复制的内容在光标的下一行粘贴，P则为粘贴在光标的上一行。</p>
<p>u：复原前一个操作。</p>
<p>[Ctrl]+r：重做上一个操作。</p>
<p>.：小数点，重复前一个操作。</p>
<p>一般模式切换到编辑模式：</p>
<p>i,I：进入插入模式，i为从目前光标所在处插入。I为在目前所在行的第一个非空格字符处开始插入。</p>
<p>a，A：进入插入模式。a为从目前光标所在处的下一个字符处开始插入。A为从所在行的最后一个字符处开始插入。</p>
<p>o，O：进入插入模式。o为在下一行插入。O为在上一行插入。</p>
<p>r，R：进入替换模式。r只替换光标所在那个字符一次。R会一直替换光标所在字符，直到按下Esc键。</p>
<p>一般模式切换到命令行：</p>
<p>:w：将编辑的数据写入到硬盘中。</p>
<p>:q：离开vi.后面加！为强制离开。</p>
<p>:wq：保存后离开。:wq!为强制保存后离开。</p>
<p>目前主要的编辑器都有恢复功能，vim也不例外。vim是通过“保存”文件来挽回数据的。</p>
<p>每当我们在用vim编辑时，vim都会自动在被编辑的文件的目录下面再新建一个名为filename.swap的文件。这就是一个暂存文件，我们对文件filename所做的操作都会被记录到这个文件当中。如果系统意外崩溃，导致文件没有正常保存，那么这个暂存文件就会发挥作用。下面用一个例子来说明(Note：我用的是Ubuntu)。</p>
<p>打开终端，输入命令，将etc目录下面的manpath.config复制到tmp目录下面，并且更改当前工作目录为tmp：</p>
<p>cp /etc/manpath.config /tmp</p>
<p>cd /tmp</p>
<p>用vim编辑manpath.config文件：vim manpath.config。</p>
<p>我们在vim的一般模式下按下Ctrl+z组合键，vim就会被丢到后台执行。回到命令提示符环境后，我们模拟将vim的工作不正常中断。</p>
<p>kill -9 %1;强制杀死制定的进程。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
</search>
